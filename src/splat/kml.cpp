//
//  kml.cpp
//  splat
//
//  Created by Peter Work Watkins on 1/9/18.
//  Copyright Â© 2018 ke7ist. All rights reserved.
//

#include "splat_run.h"
#include "site.h"
#include "elevation_map.h"
#include "kml.h"
#include "path.h"
#include "utilities.h"

void Kml::WriteKML(const Site &source, const Site &destination)
{
    int	x, y;
    char	block, report_name[80];
    double	distance, rx_alt, tx_alt, cos_xmtr_angle,
    azimuth, cos_test_angle, test_alt;
    FILE	*fd=NULL;
    
    path.ReadPath(source, destination, em);
    
    sprintf(report_name,"%s-to-%s.kml",source.name.c_str(),destination.name.c_str());
    
    for (x=0; report_name[x]!=0; x++)
        if (report_name[x]==32 || report_name[x]==17 || report_name[x]==92 || report_name[x]==42 || report_name[x]==47)
            report_name[x]='_';
    
    fd=fopen(report_name,"w");
    
    fprintf(fd,"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
    fprintf(fd,"<kml xmlns=\"http://earth.google.com/kml/2.0\">\n");
    fprintf(fd,"<!-- Generated by %s Version %s -->\n",SplatRun::splat_name.c_str(), SplatRun::splat_version.c_str());
    fprintf(fd,"<Folder>\n");
    fprintf(fd,"<name>SPLAT! Path</name>\n");
    fprintf(fd,"<open>1</open>\n");
    fprintf(fd,"<description>Path Between %s and %s</description>\n",source.name.c_str(),destination.name.c_str());
    
    fprintf(fd,"<Placemark>\n");
    fprintf(fd,"    <name>%s</name>\n",source.name.c_str());
    fprintf(fd,"    <description>\n");
    fprintf(fd,"       Transmit Site\n");
    
    if (source.lat>=0.0)
        fprintf(fd,"       <BR>%s North</BR>\n",Utilities::dec2dms(source.lat).c_str());
    else
        fprintf(fd,"       <BR>%s South</BR>\n",Utilities::dec2dms(source.lat).c_str());
    
    fprintf(fd,"       <BR>%s West</BR>\n",Utilities::dec2dms(source.lon).c_str());
    
    azimuth=source.Azimuth(destination);
    distance=source.Distance(destination);
    
    if (sr.metric)
        fprintf(fd,"       <BR>%.2f km",distance*KM_PER_MILE);
    else
        fprintf(fd,"       <BR>%.2f miles",distance);
    
    fprintf(fd," to %s</BR>\n       <BR>toward an azimuth of %.2f%c</BR>\n",destination.name.c_str(),azimuth,176);
    
    fprintf(fd,"    </description>\n");
    fprintf(fd,"    <visibility>1</visibility>\n");
    fprintf(fd,"    <Style>\n");
    fprintf(fd,"      <IconStyle>\n");
    fprintf(fd,"        <Icon>\n");
    fprintf(fd,"          <href>root://icons/palette-5.png</href>\n");
    fprintf(fd,"          <x>224</x>\n");
    fprintf(fd,"          <y>224</y>\n");
    fprintf(fd,"          <w>32</w>\n");
    fprintf(fd,"          <h>32</h>\n");
    fprintf(fd,"        </Icon>\n");
    fprintf(fd,"      </IconStyle>\n");
    fprintf(fd,"    </Style>\n");
    fprintf(fd,"    <Point>\n");
    fprintf(fd,"      <extrude>1</extrude>\n");
    fprintf(fd,"      <altitudeMode>relativeToGround</altitudeMode>\n");
    fprintf(fd,"      <coordinates>%f,%f,30</coordinates>\n",(source.lon<180.0?-source.lon:360.0-source.lon),source.lat);
    fprintf(fd,"    </Point>\n");
    fprintf(fd,"</Placemark>\n");
    
    fprintf(fd,"<Placemark>\n");
    fprintf(fd,"    <name>%s</name>\n",destination.name.c_str());
    fprintf(fd,"    <description>\n");
    fprintf(fd,"       Receive Site\n");
    
    if (destination.lat>=0.0)
        fprintf(fd,"       <BR>%s North</BR>\n",Utilities::dec2dms(destination.lat).c_str());
    else
        fprintf(fd,"       <BR>%s South</BR>\n",Utilities::dec2dms(destination.lat).c_str());
    
    fprintf(fd,"       <BR>%s West</BR>\n",Utilities::dec2dms(destination.lon).c_str());
    
    if (sr.metric)
        fprintf(fd,"       <BR>%.2f km",distance*KM_PER_MILE);
    else
        fprintf(fd,"       <BR>%.2f miles",distance);
    
    fprintf(fd," to %s</BR>\n       <BR>toward an azimuth of %.2f%c</BR>\n",source.name.c_str(),destination.Azimuth(source),176);
    
    fprintf(fd,"    </description>\n");
    fprintf(fd,"    <visibility>1</visibility>\n");
    fprintf(fd,"    <Style>\n");
    fprintf(fd,"      <IconStyle>\n");
    fprintf(fd,"        <Icon>\n");
    fprintf(fd,"          <href>root://icons/palette-5.png</href>\n");
    fprintf(fd,"          <x>224</x>\n");
    fprintf(fd,"          <y>224</y>\n");
    fprintf(fd,"          <w>32</w>\n");
    fprintf(fd,"          <h>32</h>\n");
    fprintf(fd,"        </Icon>\n");
    fprintf(fd,"      </IconStyle>\n");
    fprintf(fd,"    </Style>\n");
    fprintf(fd,"    <Point>\n");
    fprintf(fd,"      <extrude>1</extrude>\n");
    fprintf(fd,"      <altitudeMode>relativeToGround</altitudeMode>\n");
    fprintf(fd,"      <coordinates>%f,%f,30</coordinates>\n",(destination.lon<180.0?-destination.lon:360.0-destination.lon),destination.lat);
    fprintf(fd,"    </Point>\n");
    fprintf(fd,"</Placemark>\n");
    
    fprintf(fd,"<Placemark>\n");
    fprintf(fd,"<name>Point-to-Point Path</name>\n");
    fprintf(fd,"  <visibility>1</visibility>\n");
    fprintf(fd,"  <open>0</open>\n");
    fprintf(fd,"  <Style>\n");
    fprintf(fd,"    <LineStyle>\n");
    fprintf(fd,"      <color>7fffffff</color>\n");
    fprintf(fd,"    </LineStyle>\n");
    fprintf(fd,"    <PolyStyle>\n");
    fprintf(fd,"       <color>7fffffff</color>\n");
    fprintf(fd,"    </PolyStyle>\n");
    fprintf(fd,"  </Style>\n");
    fprintf(fd,"  <LineString>\n");
    fprintf(fd,"    <extrude>1</extrude>\n");
    fprintf(fd,"    <tessellate>1</tessellate>\n");
    fprintf(fd,"    <altitudeMode>relativeToGround</altitudeMode>\n");
    fprintf(fd,"    <coordinates>\n");
    
    for (x=0; x<path.length; x++)
        fprintf(fd,"      %f,%f,5\n",(path.lon[x]<180.0?-path.lon[x]:360.0-path.lon[x]),path.lat[x]);
    
    fprintf(fd,"    </coordinates>\n");
    fprintf(fd,"   </LineString>\n");
    fprintf(fd,"</Placemark>\n");
    
    fprintf(fd,"<Placemark>\n");
    fprintf(fd,"<name>Line-of-Sight Path</name>\n");
    fprintf(fd,"  <visibility>1</visibility>\n");
    fprintf(fd,"  <open>0</open>\n");
    fprintf(fd,"  <Style>\n");
    fprintf(fd,"    <LineStyle>\n");
    fprintf(fd,"      <color>ff00ff00</color>\n");
    fprintf(fd,"    </LineStyle>\n");
    fprintf(fd,"    <PolyStyle>\n");
    fprintf(fd,"       <color>7f00ff00</color>\n");
    fprintf(fd,"    </PolyStyle>\n");
    fprintf(fd,"  </Style>\n");
    fprintf(fd,"  <LineString>\n");
    fprintf(fd,"    <extrude>1</extrude>\n");
    fprintf(fd,"    <tessellate>1</tessellate>\n");
    fprintf(fd,"    <altitudeMode>relativeToGround</altitudeMode>\n");
    fprintf(fd,"    <coordinates>\n");
    
    /* Walk across the "path", indentifying obstructions along the way */
    
    for (y=0; y<path.length; y++)
    {
        distance=5280.0*path.distance[y];
        tx_alt=sr.earthradius+source.alt+path.elevation[0];
        rx_alt=sr.earthradius+destination.alt+path.elevation[y];
        
        /* Calculate the cosine of the elevation of the
         transmitter as seen at the temp rx point. */
        
        cos_xmtr_angle=((rx_alt*rx_alt)+(distance*distance)-(tx_alt*tx_alt))/(2.0*rx_alt*distance);
        
        for (x=y, block=0; x>=0 && block==0; x--)
        {
            distance=5280.0*(path.distance[y]-path.distance[x]);
            test_alt=sr.earthradius+path.elevation[x];
            
            cos_test_angle=((rx_alt*rx_alt)+(distance*distance)-(test_alt*test_alt))/(2.0*rx_alt*distance);
            
            /* Compare these two angles to determine if
             an obstruction exists.  Since we're comparing
             the cosines of these angles rather than
             the angles themselves, the following "if"
             statement is reversed from what it would
             be if the actual angles were compared. */
            
            if (cos_xmtr_angle>=cos_test_angle)
                block=1;
        }
        
        if (block)
            fprintf(fd,"      %f,%f,-30\n",(path.lon[y]<180.0?-path.lon[y]:360.0-path.lon[y]),path.lat[y]);
        else
            fprintf(fd,"      %f,%f,5\n",(path.lon[y]<180.0?-path.lon[y]:360.0-path.lon[y]),path.lat[y]);
    }
    
    fprintf(fd,"    </coordinates>\n");
    fprintf(fd,"  </LineString>\n");
    fprintf(fd,"</Placemark>\n");
    
    fprintf(fd,"    <LookAt>\n");
    fprintf(fd,"      <longitude>%f</longitude>\n",(source.lon<180.0?-source.lon:360.0-source.lon));
    fprintf(fd,"      <latitude>%f</latitude>\n",source.lat);
    fprintf(fd,"      <range>300.0</range>\n");
    fprintf(fd,"      <tilt>45.0</tilt>\n");
    fprintf(fd,"      <heading>%f</heading>\n",azimuth);
    fprintf(fd,"    </LookAt>\n");
    
    fprintf(fd,"</Folder>\n");
    fprintf(fd,"</kml>\n");
    
    fclose(fd);
    
    fprintf(stdout, "\nKML file written to: \"%s\"",report_name);
    
    fflush(stdout);
}
