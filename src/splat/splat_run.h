/*
  Parameters for 1 arc-second high resolution mode of operation
  Generated by ./configure by watkinsp on Wed Jun 17 08:31:02 PDT 2015
*/

#define EARTHRADIUS 20902230.97
#define DEG2RAD 1.74532925199e-02
#define	METERS_PER_MILE 1609.344
#define METERS_PER_FOOT 0.3048
#define	KM_PER_MILE 1.609344
#define FOUR_THIRDS 1.3333333333333

struct site {	double lat;
    double lon;
    float alt;
    char name[50];
    char filename[255];
};

struct LR {	double eps_dielect;
    double sgm_conductivity;
    double eno_ns_surfref;
    double frq_mhz;
    double conf;
    double rel;
    double erp;
    int radio_climate;
    int pol;
    float antenna_pattern[361][1001];
};

extern char splat_version[6];
const size_t SPLAT_VERSION_SIZE = sizeof(splat_version);

extern char splat_name[10];
const size_t SPLAT_NAME_SIZE = sizeof(splat_name);

extern char dashes[80];
const size_t DASHES_SIZE = sizeof(dashes);

extern char sdf_path[255];
const size_t SDF_PATH_SIZE = sizeof(sdf_path);

extern int maxpages, arraysize;

extern char olditm, gpsav;
extern unsigned char dbm, metric, smooth_contours;
extern int contour_threshold, ippd, mpi;
extern double clutter, forced_erp, forced_freq, fzone_clearance, earthradius, ppd, dpp, max_range;

extern Path *path;
//extern struct dem *dem;
extern struct LR *LR;


struct site LoadQTH(char *filename);
char ReadLRParm(struct site txsite, char forced_read);
void PlaceMarker(struct site location, std::vector<Dem> &dem);

void WritePPM(char *filename, unsigned char geo, unsigned char kml, unsigned char ngs, struct site *xmtr, unsigned char txsites, std::vector<Dem> &dem);
void WritePPMLR(char *filename, unsigned char geo, unsigned char kml, unsigned char ngs, struct site *xmtr, unsigned char txsites, std::vector<Dem> &dem);
void WritePPMDBM(char *filename, unsigned char geo, unsigned char kml, unsigned char ngs, struct site *xmtr, unsigned char txsites, std::vector<Dem> &dem);
void WritePPMSS(char *filename, unsigned char geo, unsigned char kml, unsigned char ngs, struct site *xmtr, unsigned char txsites, std::vector<Dem> &dem);
double LonDiff(double lon1, double lon2);
int LoadANO(char *filename, std::vector<Dem> &dem);
void LoadBoundaries(char *filename, std::vector<Dem> &dem);
void LoadCities(char *filename, std::vector<Dem> &dem);
void LoadTopoData(int max_lon, int min_lon, int max_lat, int min_lat, std::vector<Dem> &dem);
void LoadUDT(char *filename, std::vector<Dem> &dem);
double GetElevation(struct site location, std::vector<Dem> &dem);
void WriteKML(struct site source, struct site destination, std::vector<Dem> &dem);
void PathReport(struct site source, struct site destination, char *name, char graph_it, double elev[], std::vector<Dem> &dem);
void SiteReport(struct site xmtr, std::vector<Dem> &dem);
void GraphTerrain(struct site source, struct site destination, char *name, std::vector<Dem> &dem);
void GraphElevation(struct site source, struct site destination, char *name, std::vector<Dem> &dem);
void GraphHeight(struct site source, struct site destination, char *name, unsigned char fresnel_plot, unsigned char normalized, std::vector<Dem> &dem);
void PlotLOSMap(struct site source, double altitude, std::vector<Dem> &dem);
void PlotLRMap(struct site source, double altitude, char *plo_filename, double elev[], std::vector<Dem> &dem);
void PlotPath(struct site source, struct site destination, char mask_value, std::vector<Dem> &dem);